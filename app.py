import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Configuration de la page Streamlit
st.set_page_config(page_title="Recommandation de Parfums", layout="wide")


# Charger les donn√©es
@st.cache_data
def load_data():
    return pd.read_excel("Classement_Parfums_91.xlsx")


df = load_data()

# Fusionner les caract√©ristiques textuelles pour le mod√®le TF-IDF
df["features"] = df["Personnalit√©"] + " " + df["Occasion"] + " " + df["Notes dominantes"] + " " + df["Intensit√©"]

# Initialiser le vectorizer TF-IDF
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(df["features"])


# Fonction pour recommander les 3 meilleurs parfums
def recommander_parfum(personnalite, occasion, notes, intensite, poids):
    input_text = (f"{personnalite} " * poids[0] +
                  f"{occasion} " * poids[1] +
                  f"{notes} " * poids[2] +
                  f"{intensite} " * poids[3])

    input_vector = vectorizer.transform([input_text])
    scores = cosine_similarity(input_vector, tfidf_matrix)[0]

    # Trouver les 3 meilleurs indices
    top_3_indices = scores.argsort()[-3:][::-1]
    top_3_parfums = df.iloc[top_3_indices]["Nom du parfum"].values
    top_3_scores = scores[top_3_indices]

    return list(zip(top_3_parfums, top_3_scores))


# Interface utilisateur divis√©e en deux colonnes
col1, col2 = st.columns(2)

# üîç **Recherche Simple**
with col1:
    st.header("üîç Recherche Simple")

    # Questions identiques pour les deux recherches
    notes = st.selectbox("Quelle note olfactive pr√©f√©rez-vous ?", df["Notes dominantes"].unique(), key="simple_notes")
    personnalite = st.selectbox("Quel est votre type de personnalit√© ?", df["Personnalit√©"].unique(),
                                key="simple_perso")
    occasion = st.selectbox("Quelle est l'occasion ?", df["Occasion"].unique(), key="simple_occa")
    intensite = st.selectbox("Quelle intensit√© pr√©f√©rez-vous ?", df["Intensit√©"].unique(), key="simple_intens")

    resultats = df[
        (df["Notes dominantes"] == notes) &
        (df["Personnalit√©"] == personnalite) &
        (df["Occasion"] == occasion) &
        (df["Intensit√©"] == intensite)
        ]

    if st.button("üîç Trouver mon parfum (simple)"):
        if not resultats.empty:
            st.subheader("‚ú® Nous vous recommandons ces parfums :")
            for parfum in resultats["Nom du parfum"].head(3):
                st.write(f"- {parfum}")
        else:
            st.warning("Aucun parfum ne correspond exactement √† vos crit√®res. Essayez d'ajuster vos choix !")

# ü§ñ **Recherche Recommand√©e (IA)**
with col2:
    st.header("ü§ñ Recherche Recommand√©e (IA)")

    # Questions identiques mais avec pond√©ration
    notes_ia = st.selectbox("Quelle note olfactive pr√©f√©rez-vous ?", df["Notes dominantes"].unique(), key="ia_notes")
    personnalite_ia = st.selectbox("Quel est votre type de personnalit√© ?", df["Personnalit√©"].unique(), key="ia_perso")
    occasion_ia = st.selectbox("Quelle est l'occasion ?", df["Occasion"].unique(), key="ia_occa")
    intensite_ia = st.selectbox("Quelle intensit√© pr√©f√©rez-vous ?", df["Intensit√©"].unique(), key="ia_intens")

    poids = [
        st.slider("Importance de la personnalit√©", 1, 3, 2),
        st.slider("Importance de l'occasion", 1, 3, 2),
        st.slider("Importance des notes dominantes", 1, 3, 2),
        st.slider("Importance de l'intensit√©", 1, 3, 2)
    ]

    if st.button("ü§ñ Trouver mon parfum (IA)"):
        recommandations = recommander_parfum(personnalite_ia, occasion_ia, notes_ia, intensite_ia, poids)
        if recommandations:
            st.subheader("‚ú® Top 3 parfums recommand√©s :")
            for parfum, score in recommandations:
                st.write(f"- **{parfum}** (Score : {score:.2f})")
        else:
            st.warning("Aucune recommandation disponible avec ces crit√®res. Essayez d'ajuster les pond√©rations !")
